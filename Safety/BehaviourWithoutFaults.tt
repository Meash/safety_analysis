<#@ template inherits="Safety.ProgramGraphDsl.ProgramGraphTransformation" hostspecific="true" #>
<#@ output encoding="us-ascii" extension=".smv" #>
<#@ assembly Name="Safety.ProgramGraphDsl.dll" #>

<#=  TransformToNuSMV() #>

DEFINE 
	GP := 0;
	SP := 35;
	SchrankeZu := v.V_Winkel = 0;
	SchrankeOffen := v.V_Winkel = 2;
	ZugAmGefahrenpunkt := v.V_PositionReal >= GP & v.V_PositionReal < GP + v.V_vReal; -- Interval
	ZugAmSensorpunkt := v.V_PositionReal >= SP & v.V_PositionReal < SP + v.V_vReal; -- Interval
	ZugSteht := v.V_vReal = 0;
	KeinFehler := (v.V_Sensor_Stoerung = L_No 
				& v.V_BahnuebergangFunksender_Stoerung = L_No 
				& v.V_Zugbremse_Ausfall = L_No
				& v.V_Schrankenmotor_Ausfall = L_No
				& v.V_Schrankensensor_Stoerung = L_No
				& v.V_ZugFunksender_Ausfall = L_No
				& v.V_ZugPunktpositionsbestimmung_Stoerung = L_No
				& v.V_Zugmotor_Ausfall = L_No);


-- Safety
LTLSPEC G KeinFehler -> (G (ZugAmGefahrenpunkt -> SchrankeZu))
LTLSPEC G KeinFehler -> (G (ZugAmGefahrenpunkt -> (SchrankeZu U ZugAmSensorpunkt)))


-- Bahnuebergang
LTLSPEC G KeinFehler -> (G (SchrankeZu -> F SchrankeOffen))
LTLSPEC G KeinFehler -> (G (v.V_ZugPunktpositionsbestimmung = L_AufFreierStrecke -> SchrankeOffen))

---- Schranke
LTLSPEC G v.V_Schrankenmotor_Ausfall = L_No -> (G F SchrankeOffen)

------ Schrankensensor
LTLSPEC G KeinFehler -> (G (SchrankeZu -> X v.V_Schrankensensor = L_Geschlossen)) -- X due to state machine timing
LTLSPEC G KeinFehler -> (G (SchrankeOffen -> X v.V_Schrankensensor = L_Offen))


---- Sensor
LTLSPEC G KeinFehler -> (G (ZugAmSensorpunkt -> (
				(X v.V_Sensor = L_ZugFaehrtDurch) 
				& (v.V_Sensor = L_ZugFaehrtDurch U v.V_Sensor = L_KeinZug))))


-- Funk
LTLSPEC G KeinFehler -> (
		F v.V_ZugFunksender = L_SicherungsAnweisungGesendet 
			-> F v.V_BahnuebergangFunkempfaenger = L_SicherungsAnweisungAngekommen)
LTLSPEC G KeinFehler -> (
		F v.V_ZugFunksender = L_AnfrageGesendet 
			-> F v.V_BahnuebergangFunkempfaenger = L_ZustandsAnfrageAngekommen)
LTLSPEC G KeinFehler -> (
		F v.V_BahnuebergangFunksender = L_BestaetigungsNachrichtGesendet 
			-> F v.V_ZugFunkempfaenger = L_SicherungsBestaetigungErhalten)


-- Zug
LTLSPEC G KeinFehler -> (F ZugAmSensorpunkt)
LTLSPEC G KeinFehler -> (! F ZugSteht)

---- Bremse
LTLSPEC G (v.V_Zugbremse = L_Bremsend -> F ZugSteht)
LTLSPEC G KeinFehler -> (! F v.V_Zugbremse = L_Bremsend)

---- ZugPunktpositionsbestimmung
LTLSPEC G KeinFehler -> 
		-- alle kommen vor
		(v.V_ZugPunktpositionsbestimmung = L_AufFreierStrecke
		& X F (v.V_ZugPunktpositionsbestimmung = L_EinschaltpunktErreicht 
		& X F (v.V_ZugPunktpositionsbestimmung = L_NachEinschaltpunkt 
		& X F (v.V_ZugPunktpositionsbestimmung = L_AnfragepunktErreicht 
		& X F (v.V_ZugPunktpositionsbestimmung = L_NachAnfragepunkt 
		& X F (v.V_ZugPunktpositionsbestimmung = L_BremseinsatzpunktErreicht 
		& X F (v.V_ZugPunktpositionsbestimmung = L_NachBremseinsatzpunkt 
		& X F (v.V_ZugPunktpositionsbestimmung = L_GefahrenpunktErreicht 
		& X F v.V_ZugPunktpositionsbestimmung = L_Ende)))))))
		-- nur eine Reihenfolge
		& v.V_ZugPunktpositionsbestimmung = L_AufFreierStrecke
		U (v.V_ZugPunktpositionsbestimmung = L_EinschaltpunktErreicht 
		U (v.V_ZugPunktpositionsbestimmung = L_NachEinschaltpunkt 
		U (v.V_ZugPunktpositionsbestimmung = L_AnfragepunktErreicht 
		U (v.V_ZugPunktpositionsbestimmung = L_NachAnfragepunkt 
		U (v.V_ZugPunktpositionsbestimmung = L_BremseinsatzpunktErreicht 
		U (v.V_ZugPunktpositionsbestimmung = L_NachBremseinsatzpunkt 
		U (v.V_ZugPunktpositionsbestimmung = L_GefahrenpunktErreicht 
		U v.V_ZugPunktpositionsbestimmung = L_Ende))))))))

---- Zugsteuerung
LTLSPEC G KeinFehler
			-> G ((v.V_ZugPunktpositionsbestimmung = L_BremseinsatzpunktErreicht 
						& SchrankeOffen)
				-> X v.V_Zugsteuerung = L_Zwangsbremsung)
